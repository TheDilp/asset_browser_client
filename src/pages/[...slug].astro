---
import { Icon } from "astro-icon";
import Wrapper from "../components/Wrapper.astro";
type UserType = "arctur" | "david" | "marija" | "all";
const { slug } = Astro.params;
const lastChar = slug?.slice(-1);

const response = await fetch(`${import.meta.env.PUBLIC_BASE_SERVER}/${slug || ""}${lastChar === "/" || !lastChar ? "" : "/"}`, {
  method: "GET",
  headers: {
    "Access-Control-Allow-Origin": "*",
  },
});

const preFormattedData: {
  link: string;
  title: string;
  isFolder: boolean;
  isImage: boolean;
  isSound: boolean;
}[] = await response.json();

const data: {
  link: string;
  title: string;
  isFolder: boolean;
  isImage: boolean;
  isSound: boolean;
  user: "arctur" | "david" | "marija" | "all";
}[] = preFormattedData
  ?.map((i) => {
    if (slug === "dnd") {
      if (i.title.toLowerCase().includes("chronicles") || i.title.toLowerCase().includes("frontier"))
        return { ...i, user: "arctur" as UserType };
      if (i.title.toLowerCase().includes("wake")) return { ...i, user: "david" as UserType };
      if (i.title.toLowerCase().includes("asaraa")) return { ...i, user: "marija" as UserType };
      if (i.title.toLowerCase().includes("common")) return { ...i, user: "all" as UserType };
    }
    return { ...i, user: "all" as UserType };
  })
  .flatMap((i) => (i ? [i] : []));
---

<Wrapper>
  <div class="p-4">
    <table class="table-auto border-collapse text-white border border-zinc-700">
      <thead class="border border-zinc-700">
        <tr class="px-2 text-lg divide-x divide-zinc-700">
          <th class="px-2">Type</th>
          <th class="px-2 w-full text-left">Title</th>
          <th class="px-2">Actions</th>
        </tr>
      </thead>
      <tbody>
        {
          data.map((i) => (
            <tr
              data-user={slug === "dnd" ? i.user : "all"}
              data-image={i.isImage ? i.link : ""}
              class="divide-zinc-700 px-2 min-h-[8rem] border-y border-zinc-700 itemLink cursor-pointer">
              <td
                class={`px-2 ${i.isImage ? "min-w-[4rem]" : ""}`}
                style={{
                  backgroundImage: i.isImage ? `url("${i.link.replaceAll(" ", "%20")}")` : "",
                  backgroundPosition: "center",
                  backgroundRepeat: "no-repeat",
                  backgroundSize: "contain",
                }}>
                {i.isFolder ? (
                  <div class="w-10">
                    <Icon name="ph:folder" />
                  </div>
                ) : null}

                {i.isSound ? (
                  <audio class=" max-h-8" controls>
                    <source src={i.link} />
                  </audio>
                ) : null}
              </td>
              <td
                class={`border group z-10  text-white itemTitle ${
                  i.isImage
                    ? "text-white group-hover:opacity-100 text-left w-full transition-opacity text-sm"
                    : "text-black text-base capitalize"
                }
                ${i.isFolder ? "[&>*]:hover:text-blue-400" : ""}
            `}>
                <a class={`text-white min-h-[40px] block`} href={i.isFolder ? i.link : "#"}>
                  <span class="top-2 relative px-2">{i.title || i.link}</span>
                </a>
              </td>
              <td class="px-2">
                {!i.isFolder && (i.isImage || i.isSound) ? (
                  <button
                    class={`w-fit  transition-colors active:text-blue-600 copyItemButton ${
                      i.isImage ? "hover:text-blue-200 text-white" : "hover:text-blue-400 text-white"
                    }
                    ${i.isSound ? "mt-1" : ""}
                    `}
                    data-link={i.link}>
                    <Icon name="ph:copy" size={24} />
                  </button>
                ) : null}
                {(i.isFolder && !i.isImage && !i.isSound) || slug?.startsWith("dnd/common") ? null : (
                  <button
                    class={`w-fit my-auto transition-colors active:text-red-200 copyItemButton text-white hover:text-red-500 deleteItemButton`}
                    id={i.link}>
                    <Icon name="ph:trash" size={24} />
                  </button>
                )}
              </td>
            </tr>
          ))
        }
      </tbody>
    </table>
  </div>

  <div class="text-6xl font-bold mt-4 text-center hidden text-white" id="selectUserWarning">Select a user</div>
  <div class="w-full gap-x-2 justify-center items-center mt-4 hidden" id="selectUserPassword">
    <input
      placeholder="Enter the provided password"
      class="w-64 placeholder:text-center border bg-zinc-800 text-white border-zinc-700 rounded-md py-1 px-4"
      type="password"
      id="passwordInput"
    />
    <button
      id="submitPassword"
      class="border rounded bg-blue-600 shadow active:shadow-none active:bg-blue-300 text-white py-1 px-4">Login</button
    >
  </div>

  <!-- Modal -->
  <div class="w-screen h-screen absolute top-0 items-center justify-center z-20 overflow-hidden hidden" id="modal">
    <div class="bg-black opacity-75 w-full h-full absolute z-10" id="modalOverlay"></div>
    <div class="absolute top-0 right-0 z-20 text-white">
      <button id="modalCloseBtn">
        <Icon name="ph:x" size={48} />
      </button>
    </div>
    <div class="z-20 h-[80%] max-w-[80%] flex items-center justify-center">
      <img id="modalImage" class="object-contain h-full" src="" />
    </div>
  </div>

  <script>
    document.title = "Foundry Asset Browser";
    const user = localStorage.getItem("user");
    const password = localStorage.getItem("password");

    document.querySelectorAll("audio").forEach((aud) =>
      aud.addEventListener("play", (e) => {
        e.stopImmediatePropagation();
        e.stopPropagation();
      }),
    );

    const uploadBtn = document.getElementById("uploadBtn");
    const uploadInput = document.getElementById("uploadInput") as HTMLInputElement;

    const selectUserPassword = document.getElementById("selectUserPassword");
    const passwordInput = document.getElementById("passwordInput") as HTMLInputElement;
    const submitPasswordBtn = document.getElementById("submitPassword") as HTMLButtonElement | null;
    const modal = document.getElementById("modal");
    const modalImage = document.getElementById("modalImage") as HTMLImageElement;
    const modalCloseButton = document.getElementById("modalCloseBtn");
    const modalOverlay = document.getElementById("modalOverlay");

    const audioElements = document.querySelectorAll("audio");

    if (audioElements?.length) {
      audioElements.forEach((el) => (el.volume = 0.5));
    }

    if (uploadInput.dataset.path !== "dnd" && uploadInput.dataset.path !== "dnd/") {
      if (
        (uploadInput.dataset.path?.startsWith("dnd/chronicles-of-salaraan") ||
          uploadInput.dataset.path?.startsWith("dnd/frontier")) &&
        user !== "arctur"
      ) {
        window.location.replace("/dnd");
      }
      if (uploadInput.dataset.path?.startsWith("dnd/dark-wake") && user !== "david") {
        window.location.replace("/dnd");
      }
      if (uploadInput.dataset.path?.startsWith("dnd/asaraa") && user !== "marija") {
        window.location.replace("/dnd");
      }
    }
    if (modal) {
      if (modalCloseButton) {
        modalCloseButton.addEventListener("click", () => {
          modal.classList.add("hidden");
          modalImage.src = "";
        });
      }
      if (modalOverlay) {
        modalOverlay.addEventListener("click", () => {
          modal.classList.add("hidden");
          modalImage.src = "";
        });
      }
    }

    uploadBtn?.addEventListener("click", () => {
      if (uploadInput) uploadInput.click();
    });
    if (uploadInput)
      uploadInput.addEventListener("change", async (e) => {
        //   @ts-ignore
        const files = e.target.files;
        const data = new FormData();
        data.append("file", files[0]);
        data.append("path", `${uploadInput.dataset.path}/${files[0].name}`);
        try {
          await fetch(`${import.meta.env.PUBLIC_BASE_SERVER}/upload`, {
            method: "POST",
            body: data,
            headers: {
              "Access-Control-Allow-Origin": "*",
              ...(typeof data === "string" ? { "Content-Type": "application/json" } : {}),
            },
          });
          window.location.reload();
        } catch (error) {
          console.error(error);
        }
      });

    const deleteItemBtns = document.querySelectorAll(".deleteItemButton");
    const copyItemBtns = document.querySelectorAll(".copyItemButton");

    deleteItemBtns.forEach((btn) => {
      if (!user) return;
      if (user) {
        if (
          (uploadInput.dataset.path?.startsWith("dnd/chronicles-of-salaraan") ||
            uploadInput.dataset.path?.startsWith("dnd/frontier")) &&
          user !== "arctur"
        ) {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/dark-wake") && user !== "david") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/asaraa") && user !== "marija") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/common")) {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        btn.addEventListener("click", async (e) => {
          e.preventDefault();
          e.stopPropagation();
          const accept = confirm("Are you sure you want to delete this item?");
          if (accept) {
            // @ts-ignore
            const key = e.currentTarget.id;

            await fetch(`${import.meta.env.PUBLIC_BASE_SERVER}/delete`, {
              method: "DELETE",
              body: JSON.stringify({ key, user }),
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Content-Type": "application/json",
              },
            });
            window.location.reload();
          }
        });
      }
    });
    copyItemBtns.forEach((btn) => {
      if (!user) return;
      if (user) {
        if (
          (uploadInput.dataset.path?.startsWith("dnd/chronicles-of-salaraan") ||
            uploadInput.dataset.path?.startsWith("dnd/frontier")) &&
          user !== "arctur"
        ) {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/dark-wake") && user !== "david") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/asaraa") && user !== "marija") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }

        btn.addEventListener("click", async (e) => {
          e.preventDefault();
          e.stopPropagation();
          // @ts-ignore
          const link = btn.dataset.link;

          if (link) {
            navigator.clipboard.writeText(link.replaceAll(" ", "%20"));
          }
        });
      }
    });

    function passwordEnter() {
      if (!user) {
        alert("Please select a user.");
        return;
      }
      if (passwordInput && !passwordInput.value) {
        alert("Please enter a password.");
        return;
      }
      if (password && submitPasswordBtn) {
        submitPasswordBtn.disabled = true;
      }
      window.location.reload();
      if (user === "arctur" && passwordInput.value === "NewDiceLookNice20") {
        localStorage.setItem("password", passwordInput.value);
        window.location.reload();
        return;
      }
      if (user === "david" && passwordInput.value === "TPKAllTheWay23") {
        localStorage.setItem("password", passwordInput.value);
        window.location.reload();
        return;
      }
      if (user === "marija" && passwordInput.value === "ExodusIsABlobFish") {
        localStorage.setItem("password", passwordInput.value);
        window.location.reload();
        return;
      } else {
        alert("Incorrect password!");
      }
    }

    if (submitPasswordBtn) submitPasswordBtn.addEventListener("click", passwordEnter);

    passwordInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        passwordEnter();
      }
    });

    if ((user && password) || !user) {
      if (selectUserPassword) selectUserPassword.style.display = "none";
    }
  </script>

  <script is:inline>
    const user = localStorage.getItem("user");
    const password = localStorage.getItem("password");
    if (user) {
      if (selectUserWarning) selectUserWarning.style.display = "none";
    }
    if (!user || !password) {
      if (content) content.style.display = "none";

      if (!user) {
        selectUserWarning?.classList.remove("hidden");
        userSelect.style.border = "solid";
        userSelect.style.borderColor = "red";
        userSelect.style.borderWidth = "2px";
        userSelect.style.color = "red";
        userSelect.style.borderRadius = "0.375rem";
      }
      if (!password) {
        selectUserPassword?.classList.remove("hidden");
        selectUserPassword?.classList.add("flex");
      }
    }
  </script>
</Wrapper>
