---
import { Icon } from "astro-icon";

type UserType = "arctur" | "david" | "marija" | "all";

const { slug } = Astro.params;
const lastChar = slug?.slice(-1);

const pageTitle = slug ? slug.split("/").at(-1) : "Foundry Asset Manager";

const response = await fetch(`${import.meta.env.PUBLIC_BASE_SERVER}/${slug || ""}${lastChar === "/" || !lastChar ? "" : "/"}`, {
  method: "GET",
  headers: {
    "Access-Control-Allow-Origin": "*",
  },
});

const preFormattedData: {
  link: string;
  title: string;
  isFolder: boolean;
  isImage: boolean;
  isSound: boolean;
}[] = await response.json();

const data: {
  link: string;
  title: string;
  isFolder: boolean;
  isImage: boolean;
  isSound: boolean;
  user: "arctur" | "david" | "marija" | "all";
}[] = preFormattedData
  ?.map((i) => {
    if (slug === "dnd") {
      if (i.title.toLowerCase().includes("chronicles")) return { ...i, user: "arctur" as UserType };
      if (i.title.toLowerCase().includes("wake")) return { ...i, user: "david" as UserType };
      if (i.title.toLowerCase().includes("asaraa")) return { ...i, user: "marija" as UserType };
      if (i.title.toLowerCase().includes("common")) return { ...i, user: "all" as UserType };
    }
    return { ...i, user: "all" as UserType };
  })
  .flatMap((i) => (i ? [i] : []));
---

<html
  lang="en"
  x-data="{darkMode: localStorage.getItem('darkMode')}"
  x-init="$watch('darkMode', val => localStorage.setItem('darkMode', val))"
  x-bind:data-theme="darkMode"
  class="bg-zinc-950">
  <div class="min-h-screen h-screen w-screen dark:bg-zinc-950 bg-white" id="container">
    <h1
      class="shadow capitalize border-b py-4 flex items-center justify-center gap-x-2 text-4xl font-bold min-h-[4.5rem] dark:bg-zinc-900 dark:text-white">
      <div class="flex items-center w-full gap-x-2">
        {
          slug !== "dnd" ? (
            <a href={`/${slug?.split("/").slice(0, -1).join("/")}`} class="mr-auto ml-4">
              <Icon name="ph:caret-left" size={36} />
            </a>
          ) : (
            <div class="w-9 mr-auto" />
          )
        }
        <span class="flex-1 flex justify-center gap-x-2">
          <span>
            {pageTitle}
          </span>
          {
            slug !== "dnd" ? (
              <button class="w-10 hover:text-blue-400 transition-colors active:text-blue-200" id="uploadBtn">
                <Icon name="ph:upload" />
              </button>
            ) : null
          }
        </span>
        <button id="darkModeBtn">
          <div class="h-8 w-8 dark:hidden block" id="sunIcon">
            <Icon name="ph:sun" />
          </div>
          <div class="h-8 w-8 hidden dark:block" id="moonIcon">
            <Icon name="ph:moon" />
          </div>
        </button>
        <select class="text-base text-black mr-4 p-1 rounded dark:text-white dark:bg-zinc-800" id="userSelect">
          <option value="">Select user</option>
          <option value="arctur">Arctur</option>
          <option value="david">David</option>
          <option value="marija">Marija</option>
        </select>
      </div>
      <input type="file" class="hidden" name="files" id="uploadInput" data-path={slug} />
    </h1>

    <div class={`grid gap-2 grid-cols-1 sm:grid-cols-2 md:grid-cols-4 p-4`} id="content">
      {
        (data || []).map((i) => (
          <a
            data-user={slug === "dnd" ? i.user : "all"}
            data-image={i.isImage ? i.link : ""}
            class={`rounded shadow-md col-span-1 group h-64 relative overflow-hidden flex flex-col gap-y-0 itemLink dark:text-white dark:bg-zinc-800`}
            href={i.isFolder ? i.link : "#"}>
            <div class="h-6 flex items-center max-h-8 justify-end gap-x-4 z-10 p-4">
              {!i.isFolder && (i.isImage || i.isSound) ? (
                <button
                  class={`w-fit transition-colors active:text-zinc-300 copyItemButton ${
                    i.isImage
                      ? "text-black hover:text-zinc-200 dark:text-white"
                      : "hover:text-zinc-800 dark:hover:text-zinc-400 dark:text-white"
                  }`}
                  data-link={i.link}>
                  <Icon name="ph:copy" size={24} />
                </button>
              ) : null}
              {(i.isFolder && !i.isImage && !i.isSound) || slug?.startsWith("dnd/common") ? null : (
                <button
                  class={`w-fit transition-colors active:text-red-200 copyItemButton dark:text-white hover:text-red-500 deleteItemButton`}
                  id={i.link}>
                  <Icon name="ph:trash" size={24} />
                </button>
              )}
            </div>
            <h2
              class={`text-2xl group truncate px-4 z-10 min-h-[2rem] dark:text-white max-w-full text-center mt-4 font-bold capitalize itemTitle ${
                i.isImage ? "text-white opacity-0 group-hover:opacity-100 transition-opacity" : "text-black"
              }
            `}>
              {i.title}
            </h2>
            <div class="flex items-center justify-center max-w-full">
              {i.isFolder ? (
                <div class="w-36">
                  <Icon name="ph:folder" />
                </div>
              ) : null}

              {i.isSound ? (
                <audio class="mt-4" controls>
                  <source src={i.link} />
                </audio>
              ) : null}
            </div>
            <div
              class="absolute rounded z-0 flex h-full w-full flex-col items-center justify-end bg-center transition-all group-hover:brightness-75  pointer-events-none"
              style={{
                backgroundImage: i.isImage ? `url(${i.link.replaceAll(" ", "%20")})` : "",
                backgroundPosition: "center",
                backgroundRepeat: "no-repeat",
                backgroundSize: "cover",
              }}
            />
          </a>
        ))
      }
    </div>
    <div class="text-6xl font-bold mt-4 text-center hidden dark:text-white" id="selectUserWarning">Select a user</div>
    <div class="w-full gap-x-2 justify-center items-center mt-4 hidden" id="selectUserPassword">
      <input
        placeholder="Enter the provided password"
        class="w-64 placeholder:text-center border dark:bg-zinc-800 dark:text-white dark:border-zinc-700 rounded-md py-1 px-4"
        type="password"
        id="passwordInput"
      />
      <button
        id="submitPassword"
        class="border rounded bg-blue-600 shadow active:shadow-none active:bg-blue-300 text-white py-1 px-4">Login</button
      >
    </div>
    <div class="w-screen h-screen absolute top-0 items-center justify-center z-20 overflow-hidden hidden" id="modal">
      <div class="bg-black opacity-75 w-full h-full absolute z-10" id="modalOverlay"></div>
      <div class="absolute top-0 right-0 z-20 text-white">
        <button id="modalCloseBtn">
          <Icon name="ph:x" size={48} />
        </button>
      </div>
      <div class="z-20 h-fit max-h-full w-fit max-w-full">
        <img id="modalImage" class="object-contain max-w-full w-full h-full max-h-full" src="" />
      </div>
    </div>
  </div>

  <script>
    document.title = "Foundry Asset Browser";
    const user = localStorage.getItem("user");
    const darkMode = localStorage.getItem("darkMode");
    const password = localStorage.getItem("password");

    document.querySelectorAll("audio").forEach((aud) =>
      aud.addEventListener("play", (e) => {
        e.stopImmediatePropagation();
        e.stopPropagation();
      }),
    );

    const uploadBtn = document.getElementById("uploadBtn");
    const uploadInput = document.getElementById("uploadInput") as HTMLInputElement;
    const userSelect = document.getElementById("userSelect") as HTMLSelectElement;
    const selectUserPassword = document.getElementById("selectUserPassword");
    const passwordInput = document.getElementById("passwordInput") as HTMLInputElement;
    const submitPasswordBtn = document.getElementById("submitPassword") as HTMLButtonElement | null;
    const modal = document.getElementById("modal");
    const modalImage = document.getElementById("modalImage") as HTMLImageElement;
    const modalCloseButton = document.getElementById("modalCloseBtn");
    const modalOverlay = document.getElementById("modalOverlay");
    const darkmodeContainer = document.getElementById("darkmodeContainer");
    const darkModeBtn = document.getElementById("darkModeBtn") as HTMLButtonElement;

    darkModeBtn.addEventListener("click", () => {
      localStorage.setItem("darkMode", darkMode === "dark" ? "light" : "dark");
      window.location.reload();
    });

    if (uploadInput.dataset.path !== "dnd" && uploadInput.dataset.path !== "dnd/") {
      if (uploadInput.dataset.path?.startsWith("dnd/chronicles-of-salaraan") && user !== "arctur") {
        window.location.replace("/dnd");
      }
      if (uploadInput.dataset.path?.startsWith("dnd/dark-wake") && user !== "david") {
        window.location.replace("/dnd");
      }
      if (uploadInput.dataset.path?.startsWith("dnd/asaraa") && user !== "marija") {
        window.location.replace("/dnd");
      }
    }
    if (modal) {
      if (modalCloseButton) {
        modalCloseButton.addEventListener("click", () => {
          modal.classList.add("hidden");
          modalImage.src = "";
        });
      }
      if (modalOverlay) {
        modalOverlay.addEventListener("click", () => {
          modal.classList.add("hidden");
          modalImage.src = "";
        });
      }
    }

    uploadBtn?.addEventListener("click", () => {
      if (uploadInput) uploadInput.click();
    });
    if (uploadInput)
      uploadInput.addEventListener("change", async (e) => {
        //   @ts-ignore
        const files = e.target.files;
        const data = new FormData();
        data.append("file", files[0]);
        data.append("path", `${uploadInput.dataset.path}/${files[0].name}`);
        try {
          await fetch(`${import.meta.env.PUBLIC_BASE_SERVER}/upload`, {
            method: "POST",
            body: data,
            headers: {
              "Access-Control-Allow-Origin": "*",
              ...(typeof data === "string" ? { "Content-Type": "application/json" } : {}),
            },
          });
          window.location.reload();
        } catch (error) {
          console.error(error);
        }
      });

    const deleteItemBtns = document.querySelectorAll(".deleteItemButton");
    const copyItemBtns = document.querySelectorAll(".copyItemButton");

    deleteItemBtns.forEach((btn) => {
      if (!user) return;
      if (user) {
        if (uploadInput.dataset.path?.startsWith("dnd/chronicles-of-salaraan") && user !== "arctur") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/dark-wake") && user !== "david") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/asaraa") && user !== "marija") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/common")) {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        btn.addEventListener("click", async (e) => {
          e.preventDefault();
          e.stopPropagation();
          const accept = confirm("Are you sure you want to delete this item?");
          if (accept) {
            // @ts-ignore
            const key = e.currentTarget.id;

            await fetch(`${import.meta.env.PUBLIC_BASE_SERVER}/delete`, {
              method: "DELETE",
              body: JSON.stringify({ key, user }),
              headers: {
                "Access-Control-Allow-Origin": "*",
                "Content-Type": "application/json",
              },
            });
            window.location.reload();
          }
        });
      }
    });
    copyItemBtns.forEach((btn) => {
      if (!user) return;
      if (user) {
        if (uploadInput.dataset.path?.startsWith("dnd/chronicles-of-salaraan") && user !== "arctur") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/dark-wake") && user !== "david") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }
        if (uploadInput.dataset.path?.startsWith("dnd/asaraa") && user !== "marija") {
          btn.classList.add("hidden", "pointer-events-none");
          return;
        }

        btn.addEventListener("click", async (e) => {
          e.preventDefault();
          e.stopPropagation();
          // @ts-ignore
          const link = btn.dataset.link;

          if (link) {
            navigator.clipboard.writeText(link);
          }
        });
      }
    });

    function passwordEnter() {
      if (!user) {
        alert("Please select a user.");
        return;
      }
      if (passwordInput && !passwordInput.value) {
        alert("Please enter a password.");
        return;
      }
      if (password && submitPasswordBtn) {
        submitPasswordBtn.disabled = true;
      }
      window.location.reload();
      if (user === "arctur" && passwordInput.value === "NewDiceLookNice20") {
        localStorage.setItem("password", passwordInput.value);
        window.location.reload();
        return;
      }
      if (user === "david" && passwordInput.value === "TPKAllTheWay23") {
        localStorage.setItem("password", passwordInput.value);
        window.location.reload();
        return;
      }
      if (user === "marija" && passwordInput.value === "ExodusIsABlobFish") {
        localStorage.setItem("password", passwordInput.value);
        window.location.reload();
        return;
      } else {
        alert("Incorrect password!");
      }
    }

    userSelect?.addEventListener("change", (e) => {
      if (user) {
        localStorage.removeItem("password");
      }

      // @ts-ignore
      localStorage.setItem("user", e.target.value);
      window.location.assign("/");
    });

    if (submitPasswordBtn) submitPasswordBtn.addEventListener("click", passwordEnter);

    passwordInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        passwordEnter();
      }
    });

    if ((user && password) || !user) {
      if (selectUserPassword) selectUserPassword.style.display = "none";
    }
  </script>

  <script is:inline>
    const darkMode = localStorage.getItem("darkMode");

    if (darkMode === "dark") {
      document.querySelector("html").dataset.theme = "dark";
    }
    if (localStorage.getItem("darkMode") === "light") {
      document.querySelector("html").dataset.theme = "light";
    }
    if (!localStorage.getItem("darkMode")) {
      let theme = window.matchMedia("(prefers-color-scheme: dark)") ? "dark" : "light";
      localStorage.setItem("darkMode", theme);
    }
  </script>

  <script is:inline>
    const user = localStorage.getItem("user");
    const password = localStorage.getItem("password");
    if (!user || !password) {
      if (content) content.style.display = "none";

      if (!user) {
        selectUserWarning?.classList.remove("hidden");
        userSelect.style.border = "solid";
        userSelect.style.borderColor = "red";
        userSelect.style.borderWidth = "2px";
        userSelect.style.color = "red";
        userSelect.style.borderRadius = "0.375rem";
      }
      if (!password) {
        selectUserPassword?.classList.remove("hidden");
        selectUserPassword?.classList.add("flex");
      }
    }
    if (user) {
      userSelect.value = user;
      if (selectUserWarning) selectUserWarning.style.display = "none";
      const rootContentCards = document.querySelectorAll(".itemLink");
      rootContentCards.forEach((card) => {
        // @ts-ignore
        if (card.dataset.user) {
          // @ts-ignore
          if (card.dataset.user !== user && card.dataset.user !== "all") card.classList.add("hidden");
        }
        // @ts-ignore
        if (card.dataset.image && card.dataset.image !== "") {
          // @ts-ignore
          card.addEventListener("click", () => {
            // @ts-ignore
            modalImage.src = card.dataset.image;
            modal?.classList.add("flex");
            modal?.classList.remove("hidden");
          });
        }
      });
    }
  </script>


</html>
